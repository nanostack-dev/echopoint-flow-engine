name: Release

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - '.github/workflows/**'
      - '.gitignore'
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Run tests
      run: go test -v ./...

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v8
      with:
        version: latest
        args: --timeout=5m

    - name: Determine next version
      id: version
      run: |
        # Get latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"

        # Extract version numbers
        VERSION=${LATEST_TAG#v}
        IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

        # Check commit messages since last tag for version bump type
        if [ "$LATEST_TAG" = "v0.0.0" ]; then
          # No previous tags, get all commits
          COMMITS=$(git log --oneline --no-merges)
        else
          # Get commits since last tag
          COMMITS=$(git log ${LATEST_TAG}..HEAD --oneline --no-merges)
        fi
        echo "Commits since last tag:"
        echo "$COMMITS"

        # Determine version bump based on commit messages
        if echo "$COMMITS" | grep -qiE "(breaking|major)"; then
          NEW_MAJOR=$((MAJOR + 1))
          NEW_MINOR=0
          NEW_PATCH=0
        elif echo "$COMMITS" | grep -qiE "(feat|feature|minor)"; then
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$((MINOR + 1))
          NEW_PATCH=0
        else
          NEW_MAJOR=$MAJOR
          NEW_MINOR=$MINOR
          NEW_PATCH=$((PATCH + 1))
        fi

        NEW_VERSION="v${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "has_changes=$([ -n "$COMMITS" ] && echo "true" || echo "false")" >> $GITHUB_OUTPUT

    - name: Create and push tag
      if: steps.version.outputs.has_changes == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a ${{ steps.version.outputs.version }} -m "Release ${{ steps.version.outputs.version }}"
        git push origin ${{ steps.version.outputs.version }}

    - name: Create GitHub Release
      if: steps.version.outputs.has_changes == 'true'
      run: |
        gh release create ${{ steps.version.outputs.version }} \
          --title "Release ${{ steps.version.outputs.version }}" \
          --notes "## Changes in ${{ steps.version.outputs.version }}

          This release includes all changes pushed to the main branch since the last release.

          **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ steps.version.outputs.version }}"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}